{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc31 geocat harvesting tool","text":"<p>Automate your metadata uploads to geocat.ch with ease!</p>"},{"location":"#what-is-harvesting","title":"\ud83c\udf0d What is harvesting?","text":"<p>Harvesting is the process of automatically collecting and uploading metadata records (XML files) to the geocat.ch catalog. This tool helps you batch-upload, update, and schedule your metadata management, saving you time and reducing errors.</p>"},{"location":"#how-to-use-this-tool-3-easy-steps","title":"\ud83d\udea6 How to use this tool? (3 easy steps)","text":""},{"location":"#1-setup-installation","title":"1\ufe0f\u20e3 Setup &amp; Installation","text":"<ul> <li>Install Python 3.8+ and required dependencies.</li> <li>Clone the repository and install Python packages.</li> </ul> <p>\ud83d\udee0\ufe0f See Getting Started</p>"},{"location":"#2-adjust-your-parameters","title":"2\ufe0f\u20e3 Adjust your parameters","text":"<ul> <li>Configure your credentials and API settings in <code>.env</code> and <code>config.py</code>.</li> <li>Set your target group, processing options, and the folder containing your XML files.</li> </ul> <p>\u2699\ufe0f See all parameters</p>"},{"location":"#3-automate-your-uploads","title":"3\ufe0f\u20e3 Automate your uploads","text":"<ul> <li>Schedule the script to run automatically using cron (Linux) or Task Scheduler (Windows).</li> <li>Monitor your logs to ensure everything runs smoothly.</li> </ul> <p>\ud83e\udd16 Automation guide</p>"},{"location":"#quick-example","title":"\ud83d\udcdd Quick Example","text":"<pre><code>python [main.py](http://_vscodecontentref_/1) --path ./metadata --group 42\n# Output:\n# Successfully uploaded 12 metadata records\n</code></pre>"},{"location":"automation/","title":"\ud83e\udd16 Automation","text":"<p>Automate your metadata uploads so you never forget a batch!</p>"},{"location":"automation/#linux-cron","title":"\ud83d\udc27 Linux (cron)","text":"<p>Schedule the script to run automatically at regular intervals using <code>cron</code>.</p> <ol> <li>Edit your crontab:     <pre><code>crontab -e\n</code></pre></li> <li> <p>Add a line to run the script every hour (adapt the path as needed):     <pre><code>0 * * * * /usr/bin/python3 /path/to/main.py &gt;&gt; /var/log/geocat.log 2&gt;&amp;1\n</code></pre></p> <ul> <li><code>0 * * * *</code> = every hour on the hour</li> <li>Change <code>/usr/bin/python3</code> and <code>/path/to/main.py</code> to your actual paths</li> </ul> </li> <li> <p>Restart cron if needed:     <pre><code>sudo service cron restart\n</code></pre></p> </li> </ol>"},{"location":"automation/#windows-task-scheduler","title":"\ud83e\ude9f Windows (Task Scheduler)","text":"<p>Automate the script on Windows using Task Scheduler:</p> <ol> <li>Open Task Scheduler from the Start menu.</li> <li>Create a Basic Task.</li> <li>Set the Trigger (e.g., daily, hourly).</li> <li>For Action, choose \"Start a program\":<ul> <li>Program/script: <code>python.exe</code></li> <li>Add arguments: <code>C:\\path\\to\\main.py</code></li> <li>Start in: <code>C:\\path\\to\\your\\project\\folder</code> (optional but recommended)</li> </ul> </li> <li>Finish and enable the task.</li> </ol> <p>\ud83d\udca1 If you use a virtual environment, point to the Python executable inside your <code>venv\\Scripts\\python.exe</code>.</p>"},{"location":"automation/#monitoring-logs","title":"\ud83d\udcc8 Monitoring &amp; Logs","text":"Log File Purpose <code>/var/log/geocat.log</code> All output and errors <code>errors.log</code> Critical errors only <p>Monitor logs in real time (Linux): <pre><code>tail -f /var/log/geocat.log\n</code></pre></p> <p>Example output: <pre><code>[INFO] 2023-06-01 10:00: - Processing 3 new files\n</code></pre></p> <p>!!! tip \"Pro Tip\"     Test your automation with a dry run first:     <pre><code>python main.py --dry-run\n</code></pre></p> <p>Need help? Check the Getting Started and Parameters sections, or open an issue on GitHub.</p>"},{"location":"getting-started/","title":"\ud83d\ude80 Getting Started","text":"<p>Welcome! This guide will help you set up the geocat harvesting tool from scratch.</p>"},{"location":"getting-started/#1-install-python","title":"1\ufe0f\u20e3 Install Python","text":"<p>This project requires Python 3.8 or higher.</p> <ul> <li>Download Python</li> <li>On Linux:     <pre><code>sudo apt update\nsudo apt install python3 python3-pip\n</code></pre></li> <li>On Windows: download and run the installer, and make sure to check \u201cAdd Python to PATH\u201d.</li> </ul>"},{"location":"getting-started/#2-get-the-tool","title":"2\ufe0f\u20e3 Get the tool","text":"<p>If you are comfortable with git: <pre><code>git clone https://github.com/geoadmin/service-geocat-harvesting.git\ncd service-geocat-harvesting\n</code></pre> If not: - Go to the GitHub repository - Click Code &gt; Download ZIP - Extract the ZIP and open the folder</p>"},{"location":"getting-started/#3-install-dependencies","title":"3\ufe0f\u20e3 Install dependencies","text":"<p>You need the following Python packages: - <code>requests</code> - <code>python-dotenv</code></p> <p>Install them with (choose the command that works for your system):</p> <pre><code>pip install requests python-dotenv\n# or, if you use Python 3:\npip3 install requests python-dotenv\n# or, if you use Windows:\npy -m pip install requests python-dotenv\n# or, if you use a virtual environment, activate it first!\n</code></pre> <p>\ud83d\udca1 If you get a \"command not found\" error, try <code>pip3</code> or <code>py -m pip</code> instead of <code>pip</code>. If you use a virtual environment, activate it before installing.</p>"},{"location":"getting-started/#4-configure-your-environment","title":"4\ufe0f\u20e3 Configure your environment","text":""},{"location":"getting-started/#a-create-your-env-file","title":"a. Create your <code>.env</code> file","text":"<p>Copy the example and edit it:</p> <pre><code>cp .env.example .env\nnotepad .env   # (Windows)\nnano .env      # (Linux/Mac)\n</code></pre> <p>Fill in your geocat.ch credentials:</p> <pre><code>GEOCAT_USERNAME=your_username\nGEOCAT_PASSWORD=your_password\n</code></pre>"},{"location":"getting-started/#b-edit-configpy","title":"b. Edit <code>config.py</code>","text":"<p>Open <code>config.py</code> and set the required parameters:</p> <pre><code># API endpoint\nAPI_URL = \"https://geocat.ch/api\"\n\n# Target group ID (must match your group)\nPARAMETER_GROUP = 42\n\n# Metadata processing options\nPARAMETER_UUID_PROCESSING = \"OVERWRITE\"\nUPDATE_DATE_STAMP = True\n\n# Validation strictness\nREJECT_IF_INVALID = True\n</code></pre> <ul> <li>PARAMETER_GROUP: Use the group ID assigned to your organization.</li> <li>UPDATE_DATE_STAMP: Set to <code>True</code> to update the revision date after upload.</li> </ul> <p>For more details, see Parameters.</p>"},{"location":"getting-started/#c-optional-configuring-a-proxy","title":"c. (Optional) Configuring a Proxy","text":"<p>If you are behind a proxy (e.g. in a corporate or government network), set these environment variables before running the script:</p> <ul> <li> <p>On Linux/Mac: <pre><code>export HTTP_PROXY=\"http://proxy.example.com:8080\"\nexport HTTPS_PROXY=\"http://proxy.example.com:8080\"\npython main.py\n</code></pre></p> </li> <li> <p>On Windows (cmd): <pre><code>set HTTP_PROXY=http://proxy.example.com:8080\nset HTTPS_PROXY=http://proxy.example.com:8080\npython main.py\n</code></pre></p> </li> </ul> <p>You can also add these variables to your <code>.env</code> file:</p> <pre><code>HTTP_PROXY=http://proxy.example.com:8080\nHTTPS_PROXY=http://proxy.example.com:8080\n</code></pre> <p>The script will automatically use these proxy settings.</p>"},{"location":"getting-started/#5-place-your-xml-files","title":"5\ufe0f\u20e3 Place your XML files","text":"<p>Put all your metadata XML files in the folder specified by <code>PATH_TO_XML_FILES</code> in <code>config.py</code>.</p>"},{"location":"getting-started/#6-how-to-run-the-script","title":"6\ufe0f\u20e3 How to run the script","text":"<ul> <li>On Windows:</li> <li>Open the folder where you extracted/cloned the project.</li> <li>Hold <code>Shift</code> and right-click in the folder, then choose \u201cOpen PowerShell window here\u201d or \u201cOpen command window here\u201d.</li> <li> <p>Type:      <pre><code>python main.py\n</code></pre></p> </li> <li> <p>On Linux/Mac:</p> </li> <li>Open a terminal.</li> <li><code>cd</code> into the project folder.</li> <li> <p>Run:      <pre><code>python3 main.py\n</code></pre></p> </li> <li> <p>You can also use Visual Studio Code or another IDE to run the script</p> </li> </ul> <p>You should see output like: <pre><code>[INFO] Uploaded 5 files successfully\n</code></pre></p>"},{"location":"getting-started/#tips-best-practices","title":"\ud83d\udcdd Tips &amp; Best Practices","text":"<ul> <li>Use a virtual environment to avoid dependency conflicts:     <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre></li> <li>Check your logs for errors or warnings after each run.</li> <li>Automate your uploads with cron (Linux) or Task Scheduler (Windows).</li> </ul> <p>For more help, see the Automation and Parameters sections, or open an issue on GitHub.</p>"},{"location":"parameters/","title":"\u2699\ufe0f Configuration Parameters","text":""},{"location":"parameters/#environment-variables-env","title":"\ud83c\udf31 Environment Variables (<code>.env</code>)","text":"Variable Required Description <code>GEOCAT_USERNAME</code> Yes Your geocat.ch username <code>GEOCAT_PASSWORD</code> Yes Your geocat.ch password <p>Example: <pre><code># .env\nGEOCAT_USERNAME=user@example.com\nGEOCAT_PASSWORD=s3cr3t\n</code></pre></p>"},{"location":"parameters/#script-configuration-configpy","title":"\ud83d\udee0\ufe0f Script Configuration (<code>config.py</code>)","text":"Parameter Required Description Example/Default <code>API_URL</code> Yes Geocat API endpoint <code>\"https://www.geocat.ch/geonetwork/srv/api/\"</code> <code>PARAMETER_GROUP</code> Yes Target group ID for your organisation (e.g. 42 for Freiburg) <code>42</code> <code>PARAMETER_UUID_PROCESSING</code> Yes What to do in case of UUID conflict:- <code>GENERATEUUID</code>: create a new UUID- <code>OVERWRITE</code>: replace existing- <code>NOTHING</code>: skip upload <code>\"OVERWRITE\"</code> <code>REJECT_IF_INVALID</code> Yes If <code>True</code>, accept invalid metadata; if <code>False</code>, only valid records are accepted <code>True</code> <code>UPDATE_DATE_STAMP</code> Yes If <code>True</code>, update the metadata date stamp after upload <code>True</code> <code>PARAMETER_PUBLISH_TO_ALL</code> No If <code>True</code>, publish to all (default: <code>False</code>) <code>False</code> <code>PATH_TO_XML_FILES</code> Yes Path to the folder containing your XML files <code>\"./metadata\"</code> <p>Example: <pre><code># config.py\nAPI_URL = \"https://www.geocat.ch/geonetwork/srv/api/\"\nPARAMETER_GROUP = 42\nPARAMETER_UUID_PROCESSING = \"OVERWRITE\"\nREJECT_IF_INVALID = True\nUPDATE_DATE_STAMP = True\nPARAMETER_PUBLISH_TO_ALL = False\nPATH_TO_XML_FILES = \"./metadata\"\n</code></pre></p>"},{"location":"parameters/#command-line-options","title":"\ud83d\udda5\ufe0f Command Line Options","text":"<p>You can also use command line options:</p> <p><pre><code>python main.py --help\n</code></pre> Example output: <pre><code>Usage: main.py [OPTIONS]\nOptions:\n  --path TEXT      Path to XML files\n  --group INTEGER  Target group ID\n  --dry-run        Test without uploading\n</code></pre></p> <p>Tip: See <code>config.py</code> for more details and default values.</p>"},{"location":"de/","title":"\ud83d\udc31 geocat harvesting tool","text":"<p>Automatisieren Sie Ihre Metadaten-Uploads zu geocat.ch ganz einfach!</p>"},{"location":"de/#was-ist-harvesting","title":"\ud83c\udf0d Was ist Harvesting?","text":"<p>Harvesting ist der Prozess des automatischen Sammelns und Hochladens von Metadaten (XML-Dateien) in den geocat.ch-Katalog. Dieses Tool hilft Ihnen, Metadaten stapelweise hochzuladen, zu aktualisieren und zu planen \u2013 das spart Zeit und reduziert Fehler.</p>"},{"location":"de/#wie-benutze-ich-dieses-tool-3-einfache-schritte","title":"\ud83d\udea6 Wie benutze ich dieses Tool? (3 einfache Schritte)","text":""},{"location":"de/#1-einrichtung-installation","title":"1\ufe0f\u20e3 Einrichtung &amp; Installation","text":"<ul> <li>Installieren Sie Python 3.8+ und die ben\u00f6tigten Abh\u00e4ngigkeiten.</li> <li>Klonen Sie das Repository und installieren Sie die Python-Pakete.</li> </ul> <p>\ud83d\udee0\ufe0f Erste Schritte ansehen</p>"},{"location":"de/#2-passen-sie-ihre-parameter-an","title":"2\ufe0f\u20e3 Passen Sie Ihre Parameter an","text":"<ul> <li>Konfigurieren Sie Ihre Zugangsdaten und API-Einstellungen in <code>.env</code> und <code>config.py</code>.</li> <li>Legen Sie Ihre Zielgruppe, Verarbeitungsoptionen und den Ordner mit Ihren XML-Dateien fest.</li> </ul> <p>\u2699\ufe0f Alle Parameter ansehen</p>"},{"location":"de/#3-automatisieren-sie-ihre-uploads","title":"3\ufe0f\u20e3 Automatisieren Sie Ihre Uploads","text":"<ul> <li>Planen Sie das Skript zur automatischen Ausf\u00fchrung mit cron (Linux) oder dem Task Scheduler (Windows).</li> <li>\u00dcberwachen Sie Ihre Logs, um sicherzustellen, dass alles reibungslos l\u00e4uft.</li> </ul> <p>\ud83e\udd16 Automatisierungsanleitung</p>"},{"location":"de/#kurzes-beispiel","title":"\ud83d\udcdd Kurzes Beispiel","text":"<pre><code>python main.py --path ./metadata --group 42\n# Ausgabe:\n# 12 Metadatens\u00e4tze erfolgreich hochgeladen\n</code></pre>"},{"location":"de/automation/","title":"\ud83e\udd16 Automatisierung","text":"<p>Automatisieren Sie Ihre Metadaten-Uploads, damit Sie keinen Batch mehr vergessen!</p>"},{"location":"de/automation/#linux-cron","title":"\ud83d\udc27 Linux (cron)","text":"<p>Planen Sie das Skript zur automatischen Ausf\u00fchrung mit <code>cron</code>.</p> <ol> <li>Crontab bearbeiten:     <pre><code>crontab -e\n</code></pre></li> <li> <p>F\u00fcgen Sie eine Zeile hinzu, um das Skript st\u00fcndlich auszuf\u00fchren (Pfad anpassen!):     <pre><code>0 * * * * /usr/bin/python3 /pfad/zu/main.py &gt;&gt; /var/log/geocat.log 2&gt;&amp;1\n</code></pre></p> <ul> <li><code>0 * * * *</code> = jede volle Stunde</li> <li><code>/usr/bin/python3</code> und <code>/pfad/zu/main.py</code> entsprechend anpassen</li> </ul> </li> <li> <p>Cron ggf. neu starten:     <pre><code>sudo service cron restart\n</code></pre></p> </li> </ol>"},{"location":"de/automation/#windows-task-scheduler","title":"\ud83e\ude9f Windows (Task Scheduler)","text":"<p>Automatisieren Sie das Skript unter Windows mit dem Task Scheduler:</p> <ol> <li>\u00d6ffnen Sie den Task Scheduler \u00fcber das Startmen\u00fc.</li> <li>Erstellen Sie eine Basic Task.</li> <li>Legen Sie den Trigger fest (z.B. t\u00e4glich, st\u00fcndlich).</li> <li>F\u00fcr Action w\u00e4hlen Sie \"Programm starten\":<ul> <li>Programm/Skript: <code>python.exe</code></li> <li>Argumente hinzuf\u00fcgen: <code>C:\\Pfad\\zu\\main.py</code></li> <li>Starten in: <code>C:\\Pfad\\zu\\Ihrem\\Projektordner</code> (optional, empfohlen)</li> </ul> </li> <li>Aufgabe abschliessen und aktivieren.</li> </ol> <p>\ud83d\udca1 Falls Sie eine virtuelle Umgebung nutzen, geben Sie den Python-Pfad innerhalb von <code>venv\\Scripts\\python.exe</code> an.</p>"},{"location":"de/automation/#uberwachung-logs","title":"\ud83d\udcc8 \u00dcberwachung &amp; Logs","text":"Logdatei Zweck <code>/var/log/geocat.log</code> Alle Ausgaben und Fehler <code>errors.log</code> Nur kritische Fehler <p>Logs in Echtzeit \u00fcberwachen (Linux): <pre><code>tail -f /var/log/geocat.log\n</code></pre></p> <p>Beispielausgabe: <pre><code>[INFO] 2023-06-01 10:00: - Verarbeitung von 3 neuen Dateien\n</code></pre></p> <p>!!! tip \"Profi-Tipp\"     Testen Sie Ihre Automatisierung zuerst mit einem Testlauf:     <pre><code>python main.py --dry-run\n</code></pre></p> <p>Brauchen Sie Hilfe? Siehe die Abschnitte Getting Started und Parameters oder er\u00f6ffnen Sie ein Issue auf GitHub.</p>"},{"location":"de/getting-started/","title":"\ud83d\ude80 Erste Schritte","text":"<p>Willkommen! Dieses Handbuch hilft Ihnen, das geocat harvesting tool von Grund auf einzurichten.</p>"},{"location":"de/getting-started/#1-python-installieren","title":"1\ufe0f\u20e3 Python installieren","text":"<p>Dieses Projekt ben\u00f6tigt Python 3.8 oder h\u00f6her.</p> <ul> <li>Python herunterladen</li> <li>Unter Linux:     <pre><code>sudo apt update\nsudo apt install python3 python3-pip\n</code></pre></li> <li>Unter Windows: Laden Sie den Installer herunter, f\u00fchren Sie ihn aus und aktivieren Sie \u201eAdd Python to PATH\u201c.</li> </ul>"},{"location":"de/getting-started/#2-tool-herunterladen","title":"2\ufe0f\u20e3 Tool herunterladen","text":"<p>Wenn Sie mit git vertraut sind: <pre><code>git clone https://github.com/geoadmin/service-geocat-harvesting.git\ncd service-geocat-harvesting\n</code></pre> Falls nicht: - Gehen Sie zum GitHub-Repository - Klicken Sie auf Code &gt; Download ZIP - Entpacken Sie die ZIP-Datei und \u00f6ffnen Sie den Ordner</p>"},{"location":"de/getting-started/#3-abhangigkeiten-installieren","title":"3\ufe0f\u20e3 Abh\u00e4ngigkeiten installieren","text":"<p>Sie ben\u00f6tigen folgende Python-Pakete: - <code>requests</code> - <code>python-dotenv</code></p> <p>Installieren Sie diese mit (w\u00e4hlen Sie den passenden Befehl):</p> <pre><code>pip install requests python-dotenv\n# oder, falls Sie Python 3 verwenden:\npip3 install requests python-dotenv\n# oder, unter Windows:\npy -m pip install requests python-dotenv\n# oder, falls Sie eine virtuelle Umgebung nutzen, aktivieren Sie diese zuerst!\n</code></pre> <p>\ud83d\udca1 Falls Sie eine Fehlermeldung \u201ecommand not found\u201c erhalten, probieren Sie <code>pip3</code> oder <code>py -m pip</code> statt <code>pip</code>. Aktivieren Sie Ihre virtuelle Umgebung vor der Installation.</p>"},{"location":"de/getting-started/#4-umgebung-konfigurieren","title":"4\ufe0f\u20e3 Umgebung konfigurieren","text":""},{"location":"de/getting-started/#a-env-datei-erstellen","title":"a. <code>.env</code>-Datei erstellen","text":"<p>Kopieren Sie das Beispiel und bearbeiten Sie es:</p> <pre><code>cp .env.example .env\nnotepad .env   # (Windows)\nnano .env      # (Linux/Mac)\n</code></pre> <p>Tragen Sie Ihre geocat.ch-Zugangsdaten ein:</p> <pre><code>GEOCAT_USERNAME=ihr_benutzername\nGEOCAT_PASSWORD=ihr_passwort\n</code></pre>"},{"location":"de/getting-started/#b-configpy-bearbeiten","title":"b. <code>config.py</code> bearbeiten","text":"<p>\u00d6ffnen Sie <code>config.py</code> und passen Sie die notwendigen Parameter an:</p> <pre><code># API-Endpunkt\nAPI_URL = \"https://geocat.ch/api\"\n\n# Zielgruppen-ID (muss zu Ihrer Gruppe passen)\nPARAMETER_GROUP = 42\n\n# Metadaten-Verarbeitungsoptionen\nPARAMETER_UUID_PROCESSING = \"OVERWRITE\"\nUPDATE_DATE_STAMP = True\n\n# Validierungsstrenge\nREJECT_IF_INVALID = True\n</code></pre> <ul> <li>PARAMETER_GROUP: Verwenden Sie die Ihrer Organisation zugewiesene Gruppen-ID.</li> <li>UPDATE_DATE_STAMP: Setzen Sie auf <code>True</code>, um das Revisionsdatum nach dem Upload zu aktualisieren.</li> </ul> <p>Weitere Details finden Sie unter Parameter.</p>"},{"location":"de/getting-started/#c-optional-proxy-konfigurieren","title":"c. (Optional) Proxy konfigurieren","text":"<p>Falls Sie sich hinter einem Proxy befinden (z.B. in einer Beh\u00f6rde oder Firma), setzen Sie vor dem Start des Skripts diese Umgebungsvariablen:</p> <ul> <li> <p>Unter Linux/Mac: <pre><code>export HTTP_PROXY=\"http://proxy.beispiel.de:8080\"\nexport HTTPS_PROXY=\"http://proxy.beispiel.de:8080\"\npython main.py\n</code></pre></p> </li> <li> <p>Unter Windows (cmd): <pre><code>set HTTP_PROXY=http://proxy.beispiel.de:8080\nset HTTPS_PROXY=http://proxy.beispiel.de:8080\npython main.py\n</code></pre></p> </li> </ul> <p>Sie k\u00f6nnen diese Variablen auch in Ihre <code>.env</code>-Datei eintragen:</p> <pre><code>HTTP_PROXY=http://proxy.beispiel.de:8080\nHTTPS_PROXY=http://proxy.beispiel.de:8080\n</code></pre> <p>Das Skript verwendet diese Proxy-Einstellungen automatisch.</p>"},{"location":"de/getting-started/#5-xml-dateien-ablegen","title":"5\ufe0f\u20e3 XML-Dateien ablegen","text":"<p>Legen Sie alle Ihre Metadaten-XML-Dateien in den Ordner, der in <code>config.py</code> unter <code>PATH_TO_XML_FILES</code> angegeben ist.</p>"},{"location":"de/getting-started/#6-skript-ausfuhren","title":"6\ufe0f\u20e3 Skript ausf\u00fchren","text":"<ul> <li>Unter Windows:</li> <li>\u00d6ffnen Sie den Ordner, in dem Sie das Projekt extrahiert/geklohnt haben.</li> <li>Halten Sie <code>Shift</code> gedr\u00fcckt und klicken Sie mit der rechten Maustaste in den Ordner. W\u00e4hlen Sie \u201ePowerShell-Fenster hier \u00f6ffnen\u201c oder \u201eEingabeaufforderung hier \u00f6ffnen\u201c.</li> <li> <p>Geben Sie ein:      <pre><code>python main.py\n</code></pre></p> </li> <li> <p>Unter Linux/Mac:</p> </li> <li>\u00d6ffnen Sie ein Terminal.</li> <li>Navigieren Sie mit <code>cd</code> in den Projektordner.</li> <li> <p>F\u00fchren Sie aus:      <pre><code>python3 main.py\n</code></pre></p> </li> <li> <p>Sie k\u00f6nnen das Skript auch mit Visual Studio Code oder einer anderen IDE ausf\u00fchren</p> </li> </ul> <p>Sie sollten eine Ausgabe wie diese sehen: <pre><code>[INFO] 5 Dateien erfolgreich hochgeladen\n</code></pre></p>"},{"location":"de/getting-started/#tipps-best-practices","title":"\ud83d\udcdd Tipps &amp; Best Practices","text":"<ul> <li>Verwenden Sie eine virtuelle Umgebung, um Abh\u00e4ngigkeitskonflikte zu vermeiden:     <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre></li> <li>\u00dcberpr\u00fcfen Sie Ihre Logs nach jedem Lauf auf Fehler oder Warnungen.</li> <li>Automatisieren Sie Ihre Uploads mit cron (Linux) oder Task Scheduler (Windows).</li> </ul> <p>Weitere Hilfe finden Sie in den Abschnitten Automatisierung und Parameter oder er\u00f6ffnen Sie ein Issue auf GitHub.</p>"},{"location":"de/parameters/","title":"\u2699\ufe0f Konfigurationsparameter","text":""},{"location":"de/parameters/#umgebungsvariablen-env","title":"\ud83c\udf31 Umgebungsvariablen (<code>.env</code>)","text":"Variable Erforderlich Beschreibung <code>GEOCAT_USERNAME</code> Ja Ihr geocat.ch-Benutzername <code>GEOCAT_PASSWORD</code> Ja Ihr geocat.ch-Passwort <p>Beispiel: <pre><code># .env\nGEOCAT_USERNAME=benutzer@example.com\nGEOCAT_PASSWORD=geheim\n</code></pre></p>"},{"location":"de/parameters/#skript-konfiguration-configpy","title":"\ud83d\udee0\ufe0f Skript-Konfiguration (<code>config.py</code>)","text":"Parameter Erforderlich Beschreibung Beispiel/Standardwert <code>API_URL</code> Ja Geocat API-Endpunkt <code>\"https://www.geocat.ch/geonetwork/srv/api/\"</code> <code>PARAMETER_GROUP</code> Ja Zielgruppen-ID Ihrer Organisation (z.B. 42 f\u00fcr Freiburg) <code>42</code> <code>PARAMETER_UUID_PROCESSING</code> Ja Verhalten bei UUID-Konflikt:- <code>GENERATEUUID</code>: Neue UUID erzeugen- <code>OVERWRITE</code>: Bestehende ersetzen- <code>NOTHING</code>: Upload \u00fcberspringen <code>\"OVERWRITE\"</code> <code>REJECT_IF_INVALID</code> Ja Wenn <code>True</code>, werden auch ung\u00fcltige Metadaten akzeptiert; bei <code>False</code> nur g\u00fcltige Datens\u00e4tze <code>True</code> <code>UPDATE_DATE_STAMP</code> Ja Wenn <code>True</code>, wird das \u00c4nderungsdatum nach dem Upload aktualisiert <code>True</code> <code>PARAMETER_PUBLISH_TO_ALL</code> Nein Wenn <code>True</code>, f\u00fcr alle ver\u00f6ffentlichen (Standard: <code>False</code>) <code>False</code> <code>PATH_TO_XML_FILES</code> Ja Pfad zum Ordner mit Ihren XML-Dateien <code>\"./metadata\"</code> <p>Beispiel: <pre><code># config.py\nAPI_URL = \"https://www.geocat.ch/geonetwork/srv/api/\"\nPARAMETER_GROUP = 42\nPARAMETER_UUID_PROCESSING = \"OVERWRITE\"\nREJECT_IF_INVALID = True\nUPDATE_DATE_STAMP = True\nPARAMETER_PUBLISH_TO_ALL = False\nPATH_TO_XML_FILES = \"./metadata\"\n</code></pre></p>"},{"location":"de/parameters/#kommandozeilenoptionen","title":"\ud83d\udda5\ufe0f Kommandozeilenoptionen","text":"<p>Sie k\u00f6nnen auch Kommandozeilenoptionen verwenden:</p> <p><pre><code>python main.py --help\n</code></pre> Beispielausgabe: <pre><code>Usage: main.py [OPTIONS]\nOptions:\n  --path TEXT      Pfad zu den XML-Dateien\n  --group INTEGER  Zielgruppen-ID\n  --dry-run        Testlauf ohne Upload\n</code></pre></p> <p>Tipp: Siehe <code>config.py</code> f\u00fcr weitere Details und Standardwerte.</p>"},{"location":"fr/","title":"\ud83d\udc31 Outil de r\u00e9colte geocat","text":"<p>Automatisez vos envois de m\u00e9tadonn\u00e9es vers geocat.ch en toute simplicit\u00e9 !</p>"},{"location":"fr/#quest-ce-que-le-harvesting","title":"\ud83c\udf0d Qu'est-ce que le harvesting\u202f?","text":"<p>Le harvesting est le processus de collecte et de d\u00e9p\u00f4t automatique de notices de m\u00e9tadonn\u00e9es (fichiers XML) dans le catalogue geocat.ch. Cet outil vous aide \u00e0 t\u00e9l\u00e9verser, mettre \u00e0 jour et planifier la gestion de vos m\u00e9tadonn\u00e9es en lot, vous faisant gagner du temps et r\u00e9duisant les erreurs.</p>"},{"location":"fr/#comment-utiliser-cet-outil-3-etapes-faciles","title":"\ud83d\udea6 Comment utiliser cet outil ? (3 \u00e9tapes faciles)","text":""},{"location":"fr/#1-installation-preparation","title":"1\ufe0f\u20e3 Installation &amp; Pr\u00e9paration","text":"<ul> <li>Installez Python 3.8+ et les d\u00e9pendances n\u00e9cessaires.</li> <li>Clonez le d\u00e9p\u00f4t et installez les paquets Python.</li> </ul> <p>\ud83d\udee0\ufe0f Voir la prise en main</p>"},{"location":"fr/#2-reglez-vos-parametres","title":"2\ufe0f\u20e3 R\u00e9glez vos param\u00e8tres","text":"<ul> <li>Configurez vos identifiants et param\u00e8tres API dans <code>.env</code> et <code>config.py</code>.</li> <li>D\u00e9finissez votre groupe cible, les options de traitement et le dossier contenant vos fichiers XML.</li> </ul> <p>\u2699\ufe0f Voir tous les param\u00e8tres</p>"},{"location":"fr/#3-automatisez-vos-envois","title":"3\ufe0f\u20e3 Automatisez vos envois","text":"<ul> <li>Planifiez l\u2019ex\u00e9cution automatique du script avec cron (Linux) ou le Planificateur de t\u00e2ches (Windows).</li> <li>Surveillez vos logs pour v\u00e9rifier le bon d\u00e9roulement.</li> </ul> <p>\ud83e\udd16 Guide d\u2019automatisation</p>"},{"location":"fr/#exemple-rapide","title":"\ud83d\udcdd Exemple rapide","text":"<pre><code>python main.py --path ./metadata --group 42\n# Sortie :\n# 12 notices de m\u00e9tadonn\u00e9es envoy\u00e9es avec succ\u00e8s\n</code></pre>"},{"location":"fr/automation/","title":"\ud83e\udd16 Automatisation","text":"<p>Automatisez vos envois de m\u00e9tadonn\u00e9es pour ne jamais oublier un lot !</p>"},{"location":"fr/automation/#linux-cron","title":"\ud83d\udc27 Linux (cron)","text":"<p>Planifiez l\u2019ex\u00e9cution automatique du script avec <code>cron</code>.</p> <ol> <li>\u00c9ditez votre crontab :     <pre><code>crontab -e\n</code></pre></li> <li> <p>Ajoutez une ligne pour ex\u00e9cuter le script chaque heure (adaptez le chemin !) :     <pre><code>0 * * * * /usr/bin/python3 /chemin/vers/main.py &gt;&gt; /var/log/geocat.log 2&gt;&amp;1\n</code></pre></p> <ul> <li><code>0 * * * *</code> = chaque heure pile</li> <li>Modifiez <code>/usr/bin/python3</code> et <code>/chemin/vers/main.py</code> selon votre installation</li> </ul> </li> <li> <p>Red\u00e9marrez cron si besoin :     <pre><code>sudo service cron restart\n</code></pre></p> </li> </ol>"},{"location":"fr/automation/#windows-planificateur-de-taches","title":"\ud83e\ude9f Windows (Planificateur de t\u00e2ches)","text":"<p>Automatisez le script sous Windows avec le Planificateur de t\u00e2ches :</p> <ol> <li>Ouvrez le Planificateur de t\u00e2ches depuis le menu D\u00e9marrer.</li> <li>Cr\u00e9ez une t\u00e2che de base.</li> <li>D\u00e9finissez le d\u00e9clencheur (ex. quotidien, horaire).</li> <li>Pour Action, choisissez \"D\u00e9marrer un programme\" :<ul> <li>Programme/script : <code>python.exe</code></li> <li>Ajouter des arguments : <code>C:\\chemin\\vers\\main.py</code></li> <li>D\u00e9marrer dans : <code>C:\\chemin\\vers\\votre\\projet</code> (optionnel mais recommand\u00e9)</li> </ul> </li> <li>Terminez et activez la t\u00e2che.</li> </ol> <p>\ud83d\udca1 Si vous utilisez un environnement virtuel, indiquez le chemin vers <code>venv\\Scripts\\python.exe</code>.</p>"},{"location":"fr/automation/#suivi-logs","title":"\ud83d\udcc8 Suivi &amp; logs","text":"Fichier log Utilit\u00e9 <code>/var/log/geocat.log</code> Toutes les sorties et erreurs <code>errors.log</code> Erreurs critiques seulement <p>Surveillez les logs en temps r\u00e9el (Linux) : <pre><code>tail -f /var/log/geocat.log\n</code></pre></p> <p>Exemple de sortie : <pre><code>[INFO] 2023-06-01 10:00: - Traitement de 3 nouveaux fichiers\n</code></pre></p> <p>!!! tip \"Astuce\"     Testez votre automatisation d\u2019abord avec un dry run :     <pre><code>python main.py --dry-run\n</code></pre></p> <p>Besoin d\u2019aide ? Consultez les sections Prise en main et Param\u00e8tres, ou ouvrez un ticket sur GitHub.</p>"},{"location":"fr/getting-started/","title":"\ud83d\ude80 Prise en main","text":"<p>Bienvenue ! Ce guide vous aide \u00e0 configurer l\u2019outil de r\u00e9colte geocat depuis z\u00e9ro.</p>"},{"location":"fr/getting-started/#1-installer-python","title":"1\ufe0f\u20e3 Installer Python","text":"<p>Ce projet n\u00e9cessite Python 3.8 ou sup\u00e9rieur.</p> <ul> <li>T\u00e9l\u00e9charger Python</li> <li>Sous Linux :     <pre><code>sudo apt update\nsudo apt install python3 python3-pip\n</code></pre></li> <li>Sous Windows : t\u00e9l\u00e9chargez et lancez l\u2019installateur, et cochez \u201cAdd Python to PATH\u201d.</li> </ul>"},{"location":"fr/getting-started/#2-recuperer-loutil","title":"2\ufe0f\u20e3 R\u00e9cup\u00e9rer l\u2019outil","text":"<p>Si vous \u00eates \u00e0 l\u2019aise avec git : <pre><code>git clone https://github.com/geoadmin/service-geocat-harvesting.git\ncd service-geocat-harvesting\n</code></pre> Sinon : - Rendez-vous sur le d\u00e9p\u00f4t GitHub - Cliquez sur Code &gt; Download ZIP - D\u00e9compressez le ZIP et ouvrez le dossier</p>"},{"location":"fr/getting-started/#3-installer-les-dependances","title":"3\ufe0f\u20e3 Installer les d\u00e9pendances","text":"<p>Vous avez besoin des paquets Python suivants : - <code>requests</code> - <code>python-dotenv</code></p> <p>Installez-les avec (choisissez la commande adapt\u00e9e \u00e0 votre syst\u00e8me) :</p> <pre><code>pip install requests python-dotenv\n# ou, si vous utilisez Python 3 :\npip3 install requests python-dotenv\n# ou, sous Windows :\npy -m pip install requests python-dotenv\n# ou, si vous utilisez un environnement virtuel, activez-le d\u2019abord !\n</code></pre> <p>\ud83d\udca1 Si vous obtenez une erreur \"command not found\", essayez <code>pip3</code> ou <code>py -m pip</code> \u00e0 la place de <code>pip</code>. Activez votre environnement virtuel avant d\u2019installer.</p>"},{"location":"fr/getting-started/#4-configurer-votre-environnement","title":"4\ufe0f\u20e3 Configurer votre environnement","text":""},{"location":"fr/getting-started/#a-creer-votre-fichier-env","title":"a. Cr\u00e9er votre fichier <code>.env</code>","text":"<p>Copiez l\u2019exemple et \u00e9ditez-le :</p> <pre><code>cp .env.example .env\nnotepad .env   # (Windows)\nnano .env      # (Linux/Mac)\n</code></pre> <p>Renseignez vos identifiants geocat.ch :</p> <pre><code>GEOCAT_USERNAME=votre_utilisateur\nGEOCAT_PASSWORD=motdepasse\n</code></pre>"},{"location":"fr/getting-started/#b-modifier-configpy","title":"b. Modifier <code>config.py</code>","text":"<p>Ouvrez <code>config.py</code> et ajustez les param\u00e8tres n\u00e9cessaires :</p> <pre><code># URL de l\u2019API\nAPI_URL = \"https://geocat.ch/api\"\n\n# ID du groupe cible (doit correspondre \u00e0 votre groupe)\nPARAMETER_GROUP = 42\n\n# Options de traitement des m\u00e9tadonn\u00e9es\nPARAMETER_UUID_PROCESSING = \"OVERWRITE\"\nUPDATE_DATE_STAMP = True\n\n# Rigueur de validation\nREJECT_IF_INVALID = True\n</code></pre> <ul> <li>PARAMETER_GROUP : utilisez l\u2019ID de groupe attribu\u00e9 \u00e0 votre organisation.</li> <li>UPDATE_DATE_STAMP : mettez \u00e0 <code>True</code> pour mettre \u00e0 jour la date de r\u00e9vision apr\u00e8s l\u2019envoi.</li> </ul> <p>Pour plus de d\u00e9tails, voir Param\u00e8tres.</p>"},{"location":"fr/getting-started/#c-optionnel-configurer-un-proxy","title":"c. (Optionnel) Configurer un proxy","text":"<p>Si vous \u00eates derri\u00e8re un proxy (ex. en r\u00e9seau d\u2019entreprise ou administration), d\u00e9finissez ces variables d\u2019environnement avant de lancer le script :</p> <ul> <li> <p>Sous Linux/Mac : <pre><code>export HTTP_PROXY=\"http://proxy.exemple.com:8080\"\nexport HTTPS_PROXY=\"http://proxy.exemple.com:8080\"\npython main.py\n</code></pre></p> </li> <li> <p>Sous Windows (cmd) : <pre><code>set HTTP_PROXY=http://proxy.exemple.com:8080\nset HTTPS_PROXY=http://proxy.exemple.com:8080\npython main.py\n</code></pre></p> </li> </ul> <p>Vous pouvez aussi ajouter ces variables dans votre fichier <code>.env</code> :</p> <pre><code>HTTP_PROXY=http://proxy.exemple.com:8080\nHTTPS_PROXY=http://proxy.exemple.com:8080\n</code></pre> <p>Le script utilisera automatiquement ces param\u00e8tres proxy.</p>"},{"location":"fr/getting-started/#5-placez-vos-fichiers-xml","title":"5\ufe0f\u20e3 Placez vos fichiers XML","text":"<p>Placez tous vos fichiers XML de m\u00e9tadonn\u00e9es dans le dossier indiqu\u00e9 par <code>PATH_TO_XML_FILES</code> dans <code>config.py</code>.</p>"},{"location":"fr/getting-started/#6-lancer-le-script","title":"6\ufe0f\u20e3 Lancer le script","text":"<ul> <li>Sous Windows :</li> <li>Ouvrez le dossier o\u00f9 vous avez extrait/clon\u00e9 le projet.</li> <li>Maintenez <code>Shift</code> et faites un clic droit dans le dossier, puis choisissez \u201cOuvrir une fen\u00eatre PowerShell ici\u201d ou \u201cOuvrir une fen\u00eatre de commande ici\u201d.</li> <li> <p>Tapez :      <pre><code>python main.py\n</code></pre></p> </li> <li> <p>Sous Linux/Mac :</p> </li> <li>Ouvrez un terminal.</li> <li>Faites <code>cd</code> dans le dossier du projet.</li> <li> <p>Lancez :      <pre><code>python3 main.py\n</code></pre></p> </li> <li> <p>Vous pouvez aussi utiliser Visual Studio Code ou un autre IDE pour lancer le script</p> </li> </ul> <p>Vous devriez voir une sortie comme : <pre><code>[INFO] 5 fichiers envoy\u00e9s avec succ\u00e8s\n</code></pre></p>"},{"location":"fr/getting-started/#conseils-bonnes-pratiques","title":"\ud83d\udcdd Conseils &amp; bonnes pratiques","text":"<ul> <li>Utilisez un environnement virtuel pour \u00e9viter les conflits de d\u00e9pendances :     <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre></li> <li>V\u00e9rifiez vos logs apr\u00e8s chaque ex\u00e9cution pour d\u00e9tecter erreurs ou avertissements.</li> <li>Automatisez vos envois avec cron (Linux) ou le Planificateur de t\u00e2ches (Windows).</li> </ul> <p>Pour plus d\u2019aide, voir les sections Automatisation et Param\u00e8tres, ou ouvrez un ticket sur GitHub.</p>"},{"location":"fr/parameters/","title":"\u2699\ufe0f Param\u00e8tres de configuration","text":""},{"location":"fr/parameters/#variables-denvironnement-env","title":"\ud83c\udf31 Variables d\u2019environnement (<code>.env</code>)","text":"Variable Obligatoire Description <code>GEOCAT_USERNAME</code> Oui Votre identifiant geocat.ch <code>GEOCAT_PASSWORD</code> Oui Votre mot de passe geocat.ch <p>Exemple : <pre><code># .env\nGEOCAT_USERNAME=utilisateur@example.com\nGEOCAT_PASSWORD=motdepasse\n</code></pre></p>"},{"location":"fr/parameters/#configuration-du-script-configpy","title":"\ud83d\udee0\ufe0f Configuration du script (<code>config.py</code>)","text":"Param\u00e8tre Obligatoire Description Exemple/Valeur par d\u00e9faut <code>API_URL</code> Oui URL de l\u2019API geocat <code>\"https://www.geocat.ch/geonetwork/srv/api/\"</code> <code>PARAMETER_GROUP</code> Oui ID du groupe cible (ex. 42 pour Fribourg) <code>42</code> <code>PARAMETER_UUID_PROCESSING</code> Oui Que faire en cas de conflit UUID :- <code>GENERATEUUID</code> : cr\u00e9er un nouvel UUID- <code>OVERWRITE</code> : \u00e9craser- <code>NOTHING</code> : ignorer <code>\"OVERWRITE\"</code> <code>REJECT_IF_INVALID</code> Oui Si <code>True</code>, accepte les m\u00e9tadonn\u00e9es invalides ; si <code>False</code>, seulement les valides <code>True</code> <code>UPDATE_DATE_STAMP</code> Oui Si <code>True</code>, met \u00e0 jour la date apr\u00e8s l\u2019envoi <code>True</code> <code>PARAMETER_PUBLISH_TO_ALL</code> Non Si <code>True</code>, publie pour tous (d\u00e9faut : <code>False</code>) <code>False</code> <code>PATH_TO_XML_FILES</code> Oui Dossier contenant vos fichiers XML <code>\"./metadata\"</code> <p>Exemple : <pre><code># config.py\nAPI_URL = \"https://www.geocat.ch/geonetwork/srv/api/\"\nPARAMETER_GROUP = 42\nPARAMETER_UUID_PROCESSING = \"OVERWRITE\"\nREJECT_IF_INVALID = True\nUPDATE_DATE_STAMP = True\nPARAMETER_PUBLISH_TO_ALL = False\nPATH_TO_XML_FILES = \"./metadata\"\n</code></pre></p>"},{"location":"fr/parameters/#options-en-ligne-de-commande","title":"\ud83d\udda5\ufe0f Options en ligne de commande","text":"<p>Vous pouvez aussi utiliser des options en ligne de commande :</p> <p><pre><code>python main.py --help\n</code></pre> Exemple de sortie : <pre><code>Usage: main.py [OPTIONS]\nOptions:\n  --path TEXT      Dossier des fichiers XML\n  --group INTEGER  ID du groupe cible\n  --dry-run        Test sans envoi\n</code></pre></p> <p>Astuce : Voir <code>config.py</code> pour plus de d\u00e9tails et les valeurs par d\u00e9faut.</p>"}]}