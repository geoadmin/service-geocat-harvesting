{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc31 geocat harvesting tool","text":"<p>Automate metadata uploads to geocat.ch with ease</p>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Quick setup guide and installation instructions Get Started \u2192</p>"},{"location":"#automation","title":"\ud83e\udd16 Automation","text":"<p>Schedule automatic uploads with cron or Task Scheduler Automate \u2192</p>"},{"location":"#parameters","title":"\u2699\ufe0f Parameters","text":"<p>All configuration options explained Configure \u2192</p>"},{"location":"#quick-example","title":"\ud83d\udcdd Quick Example","text":"<pre><code>python main.py --path ./metadata --group 42\n# Output:\n# Successfully uploaded 12 metadata records\n</code></pre>"},{"location":"automation/","title":"\ud83e\udd16 Automation","text":""},{"location":"automation/#linux-cron","title":"\ud83d\udc27 Linux (cron)","text":"<p><pre><code>crontab -e\n</code></pre> Add for example: <pre><code>0 * * * * /usr/bin/python3 /path/to/main.py &gt;&gt; /var/log/geocat.log 2&gt;&amp;1\n</code></pre> Restart cron if needed: <pre><code>service cron restart\n</code></pre></p>"},{"location":"automation/#windows-task-scheduler","title":"\ud83e\ude9f Windows (Task Scheduler)","text":"<ol> <li>Open Task Scheduler</li> <li>Create a Basic Task</li> <li>Set the Trigger (Daily/Hourly)</li> <li>Action: \"Start a program\"<ul> <li>Program: <code>python.exe</code></li> <li>Arguments: <code>main.py</code></li> <li>(Set the \"Start in\" directory if needed)</li> </ul> </li> </ol>"},{"location":"automation/#monitoring","title":"\ud83d\udcc8 Monitoring","text":"Log File Purpose <code>/var/log/geocat.log</code> All output and errors <code>errors.log</code> Critical errors only <p>To monitor logs in real time: <pre><code>tail -f /var/log/geocat.log\n</code></pre> Example output: <pre><code>[INFO] 2023-06-01 10:00: - Processing 3 new files\n</code></pre></p> <p>!!! tip \"Pro Tip\"     Test your automation with a dry run first:     <pre><code>python main.py --dry-run\n</code></pre></p>"},{"location":"getting-started/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>=== \"Basic install\"</p> <pre><code>```sh\npip install requests python-dotenv\ngit clone https://github.com/geoadmin/service-geocat-harvesting\n# Installation complete\n```\n</code></pre> <p>=== \"Adapt proxies\"</p> <pre><code>```sh\n&amp; \"C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\\Scripts\\pip3\" install --proxy=proxy-bvcol.admin.ch:8080 requests python-dotenv\n```\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<ol> <li> <p>Create <code>.env</code> file:</p> <pre><code>cp .env.example .env\nnano .env\n</code></pre> </li> <li> <p>Edit <code>config.py</code>:</p> <pre><code># Target group ID\nPARAMETER_GROUP = 42  # (1)\n\n# Update dateStamp after upload?\nUPDATE_DATE_STAMP = True\n</code></pre> <ol> <li>Change to your target group ID</li> </ol> </li> </ol>"},{"location":"getting-started/#first-run","title":"First Run","text":"<pre><code>python main.py\n# [INFO] Uploaded 5 files successfully\n</code></pre>"},{"location":"parameters/","title":"\u2699\ufe0f Configuration Parameters","text":""},{"location":"parameters/#environment-variables-env","title":"\ud83c\udf31 Environment Variables (<code>.env</code>)","text":"Variable Required Description <code>GEOCAT_USERNAME</code> Yes Your geocat.ch username <code>GEOCAT_PASSWORD</code> Yes Your geocat.ch password <p>Example: <pre><code># .env\nGEOCAT_USERNAME=user@example.com\nGEOCAT_PASSWORD=s3cr3t\n</code></pre></p>"},{"location":"parameters/#script-configuration-configpy","title":"\ud83d\udee0\ufe0f Script Configuration (<code>config.py</code>)","text":"Variable Required Description <code>GEOCAT_USERNAME</code> Yes <code>GEOCAT_PASSWORD</code> Yes Your geocat.ch password <code>API_URL</code> Yes url of the api. For Production: \"https://www.geocat.ch/geonetwork/srv/api/\" <code>PARAMETER_GROUP</code> Yes Group ID of your organisation (42 for Freiburg for example) <code>PARAMETER_UUID_PROCESSING</code> Yes Several options in case of uuid conflict: - 'GENERATEUUID': create a new uuid for uploaded metadata records - 'OVERWRITE': deletes the old metadata record with the same uuid and adds the new one -'NOTHING': does nothing, record not uploaded <code>REJECT_IF_INVALID</code> Yes If \"True\", accept metadata records not valid, if \"False\", only metadata records with valid schema is accepted <code>UPDATE_DATE_STAMP</code> Yes If true, update the metadata date stamp <p>Example: <pre><code># API endpoint\nAPI_URL = \"https://geocat.ch/api\"\n\n# Target group ID (must match your group)\nPARAMETER_GROUP = 42\n\n# Metadata processing options\nPARAMETER_UUID_PROCESSING = \"OVERWRITE\"\nUPDATE_DATE_STAMP = True\n\n# Validation strictness\nREJECT_IF_INVALID = True\n</code></pre></p>"},{"location":"parameters/#command-line-options","title":"\ud83d\udda5\ufe0f Command Line Options","text":"<p>You can also use command line options:</p> <p><pre><code>python main.py --help\n</code></pre> Example output: <pre><code>Usage: main.py [OPTIONS]\nOptions:\n  --path TEXT      Path to XML files\n  --group INTEGER  Target group ID\n  --dry-run        Test without uploading\n</code></pre></p> <p>Tip: See <code>config.py</code> for more details and default values.</p>"}]}